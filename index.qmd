---
title: Supplementary Data
subtitle: "Physiologically driven homogenization of marine ecosystems after the end-Permian mass extinction"
format:
  html:
    toc: true
    toc-expand: 5
    toc-location: left
    code-fold: true
    html-math-method: katex
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

<div class="author-info">

Jood Al Aswad<sup>1\*</sup>, Justin L. Penn<sup>2</sup>, Pedro Monarrez<sup>3</sup>, Curtis Deutsch<sup>2</sup>, Mohamad Bazzi<sup>1</sup>, Jonathan L. Payne<sup>1</sup><br>

<p>

</p>

<div class="affiliation-info">

<sup>1</sup> Department of Earth and Planetary Sciences, Stanford University, 450 Jane Stanford Way, Stanford, CA 94305, USA.<br> <sup>2</sup> Department of Geosciences, Princeton University, Guyot Hall, Princeton, NJ 08544, USA.<br> <sup>3</sup> Department of Earth, Planetary, and Space Sciences, University of California, Los Angeles, CA 90095, USA.<br>

```{=html}
<style> 

.author-info {
  margin-left: 0;
}

.affiliation-info {
  font-size: 0.8em;
}

.content {
  margin-left: 50px;
}
</style>
```

Code compiled and curated by J.A.A. and M.B. [Contact](mailto:jalaswad@stanford.edu) and [Contact](mailto:bazzi@stanford.edu)

Correspondence and requests for materials should be addressed to J.A.A [Contact](mailto:jalaswad@stanford.edu)

## Libraries

```{r message=FALSE}
rpkg <- c("dplyr ggplot2 readr boot divvy terra divDyn paleobioDB conflicted
          CoordinateCleaner fossilbrush icosa tidyr tibble readr purrr downloadthis")

import_pkg <- function(x)
  x |> trimws() |> strsplit("\\s+")  |> unlist() |> 
  lapply(function(x) library(x, character.only = T)) |> 
  invisible()

rpkg |> import_pkg()

# Resolve conflicted functions.
conflicted::conflict_prefer(name = "filter", winner = "dplyr",losers = "stats")
```

## Custom functions

```{r}
#' @return calculate great circle distance in km
#' @param R Earth mean radius (km)
#' @param long1.r convert from degrees to radians for lats and longs
#' @export

gcd.slc <- function(long1, lat1, long2, lat2) {
  R <- 6371
  long1.r <- long1*pi/180
  long2.r <- long2*pi/180
  lat1.r <- lat1*pi/180
  lat2.r <- lat2*pi/180
  d <- acos(sin(lat1.r)*sin(lat2.r) + cos(lat1.r)*cos(lat2.r) * cos(long2.r-long1.r)) * R
  return(d) }

#' @return calculate confidence and prediction intervals
#' @param 
#' @param 
#' @export

intervals <- function(xvar,alpha = 0.975) {
  mean <- mean(xvar,na.rm = TRUE)
  std <- sd(xvar,na.rm = TRUE)
  n <- length(na.omit(xvar))
  ci.s.x <- sqrt((std^2)/n)
  pi.s.x <- std*sqrt(1 + 1/n)
  t <- qt(alpha,df = n - 1)
  ci.uci <- mean + t*ci.s.x
  ci.lci <- mean - t*ci.s.x
  pi.uci <- mean + t*pi.s.x
  pi.lci <- mean - t*pi.s.x
  res <- as.list(c(round(mean,4),round(std,4),n,round(t,4),round(ci.lci,4),round(ci.uci,4),round(pi.lci,4),round(pi.uci,4)))
  names(res) <- c('mean','st.dev','N','t.stat','Lower.CI','Upper.CI','Lower.PI','Upper.PI')
  return(res)
}

#' @return calculate jaccard similarity coefficient
#' @param 
#' @param 
#' @export

jaccard_similarity <- function(x) {
  js_table <- list()
  for (k in seq_along(x)) {
  
  # Unique cells.
  unique_cells <- unique(x[[k]]$cell)
  jaccard_similarity_table <- data.frame(cell_x = character(), cell_y = character(), jaccard_similarity = numeric(), stringsAsFactors = F)
  
  for (i in 1:length(unique_cells)) {
    cell_x <- unique_cells[i]
    # Cell_x
    unique_names_cell_x <- unique(x[[k]]$accepted_name[x[[k]]$cell == cell_x])
    
    for (j in 1:length(unique_cells)) {
      cell_y <- unique_cells[j]
      
      # Duplicate comparisons.
      if (cell_x == cell_y || cell_x > cell_y) {
        next
      }
      
      # Cell_y
      unique_names_cell_y <- unique(x[[k]]$accepted_name[x[[k]]$cell == cell_y])
      # Intersections.
      intersection <- length(generics::intersect(unique_names_cell_x, unique_names_cell_y))
      Un <- length(generics::union(unique_names_cell_x, unique_names_cell_y))
      jaccard_similarity <- intersection / Un
      # Combine results.
      jaccard_similarity_table <- rbind(jaccard_similarity_table, data.frame(cell_x = cell_x, cell_y = cell_y, jaccard_similarity = jaccard_similarity))
    }
  }
  
  # Results.
  js_table[[k]] <- jaccard_similarity_table 
  }
  return(js_table)
}

#' @return calculate czekanowski similarity coefficient
#' @param 
#' @param 
#' @export

czekanowski_similarity <- function(x) {
  2*abs(sum(x$minimum))/((sum(x$count_cell_x) + sum(x$count_cell_y)))
}
```

## Paleobiology Database

Testing coordinate validity resulted in the removal of 17 records.

```{r message=FALSE}
# Read occurrence dataset.
pbdb <- 
  openxlsx::read.xlsx(xlsxFile = "pbdb.xlsx") |> 
  # Keep two classes and select the Induan and Changhsingian.
  filter(class %in% c("Gastropoda","Bivalvia"),
         interval.ma %in% c("252.17","251.2")) |> 
  # Identify Invalid Coordinates.
  cc_val(lat = "paleolat", lon = "paleolng")

# Select variables.
pbdb <- pbdb |> 
  select(any_of(c("cell","early_interval","interval.ma","accepted_name",
                  "lat","long","ex","phylum","class","paleolat",
                  "paleolng","collection_no","reference_no")))

# Data balance.
pbdb |> 
  group_by(class,early_interval) |> 
  count() |> 
  ggplot(mapping = aes(x = class, y = n, fill = class)) +
  geom_bar(stat = "identity") +
  labs(x = NULL, y = "Sample Size") +
  scale_fill_manual(values =  c("#69b3a2","#404080")) +
  scale_color_manual(values = c("#69b3a2","#404080")) +
  facet_wrap(.~ early_interval, scales = "free") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"),
        axis.title = element_text(size = 8,face = "bold"),
        axis.text = element_text(size = 8),
        strip.text = element_text(face = "bold"),
        legend.position = "none",
        aspect.ratio = 1)
```

## Data pre-processing

Needs to explain why degress is set to five. 13 cells in the Changhsingian and 20 in the Induan.

```{r message=FALSE}
# Create equal-area icosahedral hexagonal cells.
hexa <- hexagrid(deg = 5, sf = TRUE)

# Set min occurrences
min_occ <- 20

# Changhsingian cells.
changhsingian_pbdb <-
  pbdb |> 
  filter(early_interval == "Changhsingian")

changhsingian_pbdb <- 
  changhsingian_pbdb |> 
  # Cells.
  mutate(cell = locate(x = hexa,y = changhsingian_pbdb |> select("paleolng", "paleolat")))

# Count occurrences per cell and filter by minimum occurrence.
changhsingian_pbdb <-
  changhsingian_pbdb |> 
  group_by(cell) |>
  count() |> 
  setNames(nm = c("cell","occs")) |> 
  inner_join(changhsingian_pbdb,by = c("cell")) |>
  filter(occs >= min_occ)

# Cell centroids.
changhsingian_centroid <- 
  as.data.frame(centers(hexa))[names(table(changhsingian_pbdb$cell)),] |> 
  rownames_to_column(var = "cell")

# Add centroid to master dataframe: Longitude and Latitude.
changhsingian_pbdb <- 
  changhsingian_pbdb |> 
  left_join(changhsingian_centroid, by = "cell")

# Induan cells
induan_pbdb <-
  pbdb |> 
  filter(early_interval == "Induan")

induan_pbdb <- 
  induan_pbdb |> 
  # Cells.
  mutate(cell = locate(x = hexa,y = induan_pbdb |> select("paleolng", "paleolat")))

# Count occurrences per cell and filter by minimum occurrence.
induan_pbdb <-
  induan_pbdb |> 
  group_by(cell) |>
  count() |> 
  setNames(nm = c("cell","occs")) |> 
  inner_join(induan_pbdb,by = c("cell")) |>
  filter(occs >= min_occ)

# Cell centroids
induan_centroid <- 
  as.data.frame(centers(hexa))[names(table(induan_pbdb$cell)),] |> 
  rownames_to_column(var = "cell")

# Add centroid coordinates to master dataframe.
induan_pbdb <- 
  induan_pbdb |> 
  left_join(induan_centroid, by = "cell")

# Combine the two datasets: Changhsingian & Induan.
# The pbdb dataset is has now been fully pre-processed.
pbdb <- bind_rows(changhsingian_pbdb, induan_pbdb)

# Create unique identifier for each cell.
pbdb <- 
  data.frame(unique(pbdb$cell)) |> 
  setNames(nm = "cell") |> 
  mutate(cell_id = c(1:length(cell))) |> 
  inner_join(pbdb, by = "cell")

# Plot number of occurrences per stage and cell.
cell_text <- 
  data.frame(
  label = c("N = 13 cells", "N = 20 cells"),
  early_interval = c("Changhsingian", "Induan")
)

pbdb |> 
  group_by(early_interval,cell) |> 
  count() |> 
  ggplot(mapping = aes(x = cell, y = n)) + 
  geom_col(col = "white", bg = "#53565A") +
  coord_flip() +
  geom_hline(yintercept = 20, color = "#B83A4B") +
  labs(x = NULL, y = "Occurrences") +
  geom_text(data = cell_text, mapping = aes(x = c(12,18), y = 100, label = label),
            hjust   = -0.1, vjust = -0.1, size = 3) +
  facet_wrap(.~ early_interval,scales = "free",nrow = 1) +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text  = element_text(size = 8),
        axis.title = element_text(face = "bold"),
        strip.text = element_text(face = "bold"))
```

For each stage we create individual dataframes based on cell units and store these into separate lists.

```{r}
# Data splitting based on cell id and stage.
changhsingian_split <-
  pbdb |> 
  filter(early_interval == "Changhsingian") |>
  group_split(cell_id) |> 
  lapply(as.data.frame)

induan_split <-
  pbdb |> 
  filter(early_interval == "Induan") |>
  group_split(cell_id) |> 
  lapply(as.data.frame)
```

## Subsampling by cells and occurence  

Here we perform bootstrap subsampling without replacement on our stage-level datasets using 999 iterations. For the Changhsingian we randomly sampled 20 occurrences per cell and repeated the process as stated above. Conversely, for the Induan, we applied a two-step subsampling procedure by first subsampling down to 13 cells and then by occurrences. The results are bootstrapped datasets (cell-specific) saved as nested objects within a larger list. These are subsequently, merged into single master dataframes (i.e., the cells) to create one single list containing 999 dataframes.

```{r}
# Changhsingian.
set.seed(3)

boot_changhsingian <- purrr::map(1:999, ~ { changhsingian_split |> 
  # Samples rows uniformly.
  purrr::map(~ sample_n(.x, 20, replace = FALSE))
  }
)

# Induan.
set.seed(4)

boot_induan <- purrr::map(1:999, ~ { induan_split |> 
  # Step 1. Cells.
  sample(13, replace = FALSE) |> 
  # Step 2. Rows (i.e., occurrences).
  purrr::map(~ sample_n(.x, 20, replace = FALSE))
  }
)
```

As indicated in the previous section, we here we combine cell-specific dataframes (N=13) into single joint dataframes (13*20 = 260 rows). This is repeated for all 999 sub-sampled dataframes. Worthy of note, the cells in the Induan list, will inevitably vary between the subsampled datasets, whereas, in the case of the Changhsingian they are all identical. This is because our analysis seeks to assess the impact by cell heterogeneity across geologic stages.

```{r}
# Changhsingian
combined_boot_changhsingian <- list()

for(i in seq_along(boot_changhsingian)) {
  
  pC <- purrr::map_dfr(boot_changhsingian[[i]], bind_rows)
  combined_boot_changhsingian[[i]] <- pC
  
}

# Induan
combined_boot_induan <- list()

for(i in seq_along(boot_induan)) {
  
  pI <- purrr::map_dfr(boot_induan[[i]], bind_rows)
  combined_boot_induan[[i]] <- pI
  
}
```

### Generic occurence per cell

For each subsampled dataset in both the Induan and Changhsingian lists we here count the number of occurrence of each genera by cell. This is done for all dataframes and are then combined into one master dataframe.

```{r message=FALSE}
# Changhsingian.
ch_count_ls <- 
  purrr::map(combined_boot_changhsingian, ~ .x |> group_by(accepted_name, cell) |> summarise(occs = n(), .groups = 'drop')) |> 
  lapply(as.data.frame) |> 
  bind_rows()

# Induan.
in_count_ls <- 
  purrr::map(combined_boot_induan, ~ .x |> group_by(accepted_name, cell) |> summarise(occs = n(), .groups = 'drop')) |> 
  lapply(as.data.frame) |> 
  bind_rows()
```

### Unique cell pairs

```{r}
# Changhsingian & Induan
cells_distinct_c <- 
  tibble(unique(ch_count_ls$cell)) |> setNames(nm = "x") |> 
  mutate(n_part = as.numeric(sub("F", "", x))) |> 
  arrange(n_part) |> 
  pull(x)

cells_distinct_i <- 
  tibble(unique(in_count_ls$cell)) |> setNames(nm = "x") |> 
  mutate(n_part = as.numeric(sub("F", "", x))) |> 
  arrange(n_part) |> 
  pull(x)

# Distinct cell pairs.
cells_distinct_pair_ch <-
  expand.grid(cells_distinct_c,cells_distinct_c,stringsAsFactors = F) |> 
  setNames(nm = c("x","y")) |> 
  filter(x<y) |> 
  as_tibble() # 78 unique cell pairs.

cells_distinct_pair_in <-
  expand.grid(cells_distinct_i,cells_distinct_i,stringsAsFactors = F) |> 
  setNames(nm = c("x","y")) |> 
  filter(x<y) |> 
  as_tibble() # 190 unique cell pairs.
```

### Jaccard indices

```{r message=FALSE}
# Changhsingian
changhsingian_jaccard <- 
  jaccard_similarity(combined_boot_changhsingian)

# Induan
induan_jaccard <- 
  jaccard_similarity(combined_boot_induan)

# Average similarity for each cell-pair and stage.
ave_changhsingian_jaccard <- 
  bind_rows(changhsingian_jaccard) |>
  group_by(cell_x, cell_y) |> 
  summarise(avg_jaccard = mean(jaccard_similarity)) |> 
  rename("x.cell" = "cell_x", "y.cell" = "cell_y")

ave_induan_jaccard <- 
  bind_rows(induan_jaccard) |>
  group_by(cell_x, cell_y) |> 
  summarise(avg_jaccard = mean(jaccard_similarity)) |> 
  rename("x.cell" = "cell_x", "y.cell" = "cell_y")

# Plots.

# 1. Distribution plot.

# bind_rows(changhsingian_jaccard) |>
#   group_by(cell_x, cell_y) |>
#   mutate(cell_pair = paste(cell_x, cell_y, sep = "-")) |> 
#   ggplot(aes(x = jaccard_similarity)) +
#   geom_histogram(binwidth = 0.01, fill = "#2D716F", color = "#2D716F",position = position_dodge(preserve = "single")) +
#   labs(title = "Frequency histogram",subtitle = "Bootstrapped cell-pair jaccard similarity",
#        x = "Jaccard Similarity",
#        y = "Frequency") +
#   facet_wrap(~ cell_pair, scales = "free") +
#   theme_minimal()

# 2.Average jaccard similarity of cell pairs.

# ave_changhsingian_jaccard |> 
#   mutate(cell_pair = paste0(x.cell,"-", y.cell),
#          no_similarity = ifelse(avg_jaccard == 0,"No similarity","Similarity")) |> 
#   ggplot(mapping = aes(x = cell_pair, y = avg_jaccard)) +
#   geom_segment(aes(xend = cell_pair, yend=0)) +
#   geom_point(size = 2, color = "#7F2D48", fill = alpha("grey20", 0.3), alpha = 0.7, shape = 21) +
#   labs(x = "Cell-pair",  y = "Average jaccard similarity", title = "Changhsingian") +
#   coord_flip() +
#   theme_minimal() +
#   theme(axis.title = element_text(face = "bold",size = 8),
#         axis.text = element_text(size = 6),
#         plot.title = element_text(face = "bold",size = 10),
#         strip.text = element_text(face = "bold"),
#         aspect.ratio = 1) +
#   facet_wrap(.~no_similarity,scales = "free")

# 3. Induan (as above)

# ave_induan_jaccard |> 
#   mutate(cell_pair = paste0(x.cell,"-", y.cell)) |> 
#   ggplot(mapping = aes(x = cell_pair, y = avg_jaccard)) +
#   geom_segment(aes(xend = cell_pair, yend=0)) +
#   geom_point(size = 2, color = "#7F2D48", fill = alpha("grey20", 0.3), alpha = 0.7, shape = 21) +
#   labs(x = "Cell-pair",  y = "Average jaccard similarity", title = "Induan") +
#   coord_flip() +
#   theme_classic() +
#   theme(axis.title = element_text(face = "bold",size = 8),
#         axis.text = element_text(size = 6),
#         plot.title = element_text(face = "bold",size = 10),
#         strip.text = element_text(face = "bold"),
#         aspect.ratio = 1)
```

### Great circle distance

```{r}
# Changhsingian
changhsingian_res_matrix <- cells_distinct_pair_ch |> 
  # X-coordinates
  left_join(pbdb |> select(cell,long,lat), by = c("x" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,long,lat) |> 
  rename("x_long" = "long","x_lat" = "lat") |> 
  # Y-coordinates
  left_join(pbdb |> select(cell,long,lat), by = c("y" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,x_long,x_lat,long,lat) |> 
  # Rename variables.
  rename("y_long" = "long","y_lat" = "lat") |> 
  # GCD.
  mutate(gcd = gcd.slc(long1 = x_long,lat1 = x_lat,long2 = y_long,lat2 = y_lat)) |> 
  as.data.frame()

# Induan
induan_res_matrix <- cells_distinct_pair_in |> 
  # X-coordinates
  left_join(pbdb |> select(cell,long,lat), by = c("x" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,long,lat) |> 
  rename("x_long" = "long","x_lat" = "lat") |> 
  # Y-coordinates
  left_join(pbdb |> select(cell,long,lat), by = c("y" = "cell"),relationship = "many-to-many") |> 
  distinct(x,y,x_long,x_lat,long,lat) |> 
  # Rename variables.
  rename("y_long" = "long","y_lat" = "lat") |> 
  # GCD.
  mutate(gcd = gcd.slc(long1 = x_long,lat1 = x_lat,long2 = y_long,lat2 = y_lat)) |> 
  as.data.frame()
```

### Czekanowski index

#### Changhsingian

```{r}
# Combinations of cells and accepted names.
# Results in a dataframe with 1404 rows. 108 (unique genera) * 13 unique cells.
changhsingian_combs <- 
  expand.grid(
  cell = unique(combined_boot_changhsingian[[1]]$cell),
  accepted_name = unique(combined_boot_changhsingian[[1]]$accepted_name)
)

# Count the occurrence of genera per unique cell. This will include genera with no occurrence in any given cell.
# These are removed in the next step.

changhsingian_genera_count_cell <- vector(mode = "list")

for(i in seq_along(combined_boot_changhsingian)) {

  nameCounts <- changhsingian_combs |>
  left_join(combined_boot_changhsingian[[i]] |> group_by(cell, accepted_name) |> count(), by = c("cell", "accepted_name")) |> 
  replace_na(list(n = 0))
  
  changhsingian_genera_count_cell[[i]] <- nameCounts
}

# Join against the cell pair dataframe.
# All unique genera and their count across each unique cell.
cell_ls <- 
  purrr::map(changhsingian_genera_count_cell, ~ .x |>  pivot_wider(names_from = cell, values_from = n, values_fill = list(n = 0)))

# Create two count data for each pair to join against.

changhsingian_count_lsX <- purrr::map(changhsingian_genera_count_cell, ~ .x |> rename(cell_x = cell, count_cell_x = n))
changhsingian_count_lsY <- purrr::map(changhsingian_genera_count_cell, ~ .x |> rename(cell_y = cell, count_cell_y = n))

# Merge counts for each cell pair.
changhsingian_count_merge <- 
  purrr::map(1:999, function(i) {
    cells_distinct_pair_ch |> rename("cell_x" = "x", "cell_y" = "y") |> 
    left_join(changhsingian_count_lsX[[i]], by = "cell_x", relationship = "many-to-many") %>%
    left_join(changhsingian_count_lsY[[i]], by = c("cell_y", "accepted_name")) %>%
    select(cell_x, cell_y, accepted_name, count_cell_x, count_cell_y)
})

# Split based on distinct cell pairs. This will creates a nested list with 78 splits for each dataframe i.e. 999.
czekanowski_splits <- purrr::map(1:999, function(i) {
  changhsingian_count_merge[[i]] |>
    # Remove
    filter(!(count_cell_x == 0 & count_cell_y == 0)) |> 
    # Compute the minimum value between cell x and cell y (use count variable)
    mutate(minimum = pmin(count_cell_x, count_cell_y)) |> 
    group_by(cell_x, cell_y) |>  group_split()
  })

# Compute the czekanowski index.
changhsingian_czekanowski <- vector(mode = "list")

for(i in seq_along(czekanowski_splits)) {
  cz <- lapply(czekanowski_splits[[i]], czekanowski_similarity)
  changhsingian_czekanowski[[i]] <- cz
}

# Cell pairs.
pairs_cha <- do.call("rbind",lapply(czekanowski_splits[[1]], function(x) x[1:2][1,]))

cz_results <- 
  purrr::map(changhsingian_czekanowski, ~as.data.frame(unlist(.x)) |> 
               rename("cz" = 1) |>
               cbind(pairs_cha) |> 
               relocate(.after = "cell_y","cz") |> 
               rename("x.cell" = "cell_x", "y.cell" = "cell_y")
             )

# Compute the average czekanowski per cell pair
czekanowski_dataframe <- bind_rows(cz_results)
```

### Time-series visualization

```{r}
# Changhsingian
changhsingian_res_matrix <- 
  changhsingian_res_matrix |> 
  rename("x.cell" = "x","y.cell" = "y") |> 
  left_join(ave_changhsingian_jaccard,by = c("x.cell","y.cell"))

# Induan
induan_res_matrix <- 
  induan_res_matrix |> 
  rename("x.cell" = "x","y.cell" = "y") |> 
  left_join(ave_induan_jaccard,by = c("x.cell","y.cell"))

# Bin by distance between cells (GCD in km's)
changhsingian_res_matrix$cutdist <- 
  cut(changhsingian_res_matrix$gcd,
      breaks = c(0, 2000, 4000, 6000, 8000, 10000, 12000, 
                 14000, 16000, 18000, 20000), 
      labels = c("0", "2000", "4000", "6000","8000", 
                 "10000", "12000","14000", "16000", "18000"),
                       include.lowest = TRUE)

induan_res_matrix$cutdist <- 
  cut(induan_res_matrix$gcd,
      breaks = c(0, 2000, 4000, 6000, 8000, 10000, 12000, 
                 14000, 16000, 18000, 20000), 
      labels = c("0", "2000", "4000", "6000","8000", 
                 "10000", "12000","14000", "16000", "18000"),
                       include.lowest = TRUE)

# Average and sd for Changhsingian.
sumRes_01 <- 
  changhsingian_res_matrix |> 
  group_by(cutdist) |> 
  summarise(
    # Jaccard
    avg =  mean(avg_jaccard, na.rm = TRUE),
    sdev = sd(avg_jaccard, na.rm = TRUE),
    n = n(),
    se = sdev/sqrt(n)
  ) |> 
  mutate(label = 'Changhsingian',label = as.factor(label)) |> 
  mutate(cutdist = cutdist,
         cutdist = factor(cutdist,levels = c("0","2000","4000","6000","8000","10000","12000","14000","16000","18000","20000"))) |> 
  mutate(ci = se * qt(.975, n - 1), ci = as.numeric(ci)) |> 
  as.data.frame() |> suppressWarnings() # This was added to ignore the last observation.

# Average and sd for the Induan.
sumRes_02 <- 
  induan_res_matrix |> 
  group_by(cutdist) |> 
  summarise(
    # Jaccard
    avg =  mean(avg_jaccard, na.rm = TRUE),
    sdev = sd(avg_jaccard, na.rm = TRUE),
    n = n(),
    se = sdev/sqrt(n)
  ) |> 
  mutate(label = 'Induan',label = as.factor(label)) |> 
  mutate(cutdist = cutdist,
         cutdist = factor(cutdist,levels = c("0","2000","4000","6000","8000","10000","12000","14000","16000","18000","20000"))) |> 
  mutate(ci = se * qt(.975, n - 1), ci = as.numeric(ci)) |> 
  as.data.frame() |> suppressWarnings() # This was added to ignore the last observation.

# Combine the two.
sumRes_03 <- bind_rows(sumRes_01,sumRes_02)

# Plot.
sumRes_03 |> 
  ggplot(aes(x = cutdist, y = avg, group = label, colour = label, fill = label)) +
  geom_errorbar(aes(ymin = pmax(avg-ci,0), ymax=avg+ci), width=0.05,linewidth=1, alpha=0.7) +
  geom_line() +
  scale_size_continuous(breaks = c(5,10,15,20,25,30)) +
  geom_point(aes(size = n),shape = 21, fill = "white", stroke = 2) +
  labs(x = "Great Circle Distance", 
       y = "Average Value",
       title = "Bootstrapped Jaccard",
       subtitle = "Subsampled to 13 cells with 20 randomized occurrences each") +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        aspect.ratio = 1)
```

<!-- Notes -->

```{r}
changhsingian_res_matrix <- 
  changhsingian_res_matrix |> 
  left_join(
    czekanowski_dataframe |> 
      group_by(x.cell,y.cell) |> 
      summarise(avg_cz =  mean(cz, na.rm = TRUE)), by = c("x.cell","y.cell")) |> 
  relocate(.after = "avg_jaccard","avg_cz")

# Average and sd for Changhsingian.
sumRes_04 <- 
  changhsingian_res_matrix |> 
  group_by(cutdist) |> 
  summarise(
    avg =  mean(avg_cz, na.rm = TRUE),
    sdev = sd(avg_cz, na.rm = TRUE),
    n = n(),
    se = sdev/sqrt(n)
  ) |> 
  mutate(label = 'Changhsingian',label = as.factor(label)) |> 
  mutate(cutdist = cutdist,
         cutdist = factor(cutdist,levels = c("0","2000","4000","6000","8000","10000","12000","14000","16000","18000","20000"))) |> 
  mutate(ci = se * qt(.975, n - 1), ci = as.numeric(ci)) |> 
  as.data.frame() |> suppressWarnings() # This was added to ignore the last observation.


# Plot.
sumRes_04 |> 
  ggplot(aes(x = cutdist, y = avg, group = label, colour = label, fill = label)) +
  geom_errorbar(aes(ymin = pmax(avg-ci,0), ymax=avg+ci), width=0.05,linewidth=1, alpha=0.7) +
  geom_line() +
  # scale_size_continuous(breaks = c(5,10,15,20,25,30)) +
  geom_point(aes(size = n),shape = 21, fill = "white", stroke = 2) +
  labs(x = "Great Circle Distance", 
       y = "Average Value",
       title = "Bootstrapped Czekanowski",
       subtitle = "Subsampled to 13 cells with 20 randomized occurrences each") +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold"),
        axis.title = element_text(face = "bold"),
        aspect.ratio = 1)
```

## Randomizing locations

```{r}

pbdb |> View()

```


## Download data

{{< downloadthis pbdb.csv dname="Paleobiology Database" label="Download pbdb data as .csv" icon="file-earmark-spreadsheet" type="success" >}}